if si
elif sino si...
else sino|si todo lo anterior falla

== igual
!= no igual

> mas grande que
< menor que
>= mas grande o igual que
<= menor o igual que

Condiciones encandenadas:

nombre=='lydia' and estado=='useless' si y si
nombre=='lydia' or estado=='useless' si o si

def definir

for i in range (valor Inicial, mientras Sea Menor)

DJANGO:

CREAR PROYECTO:
django-admin.exe startproject mysite .

MIGRAR BASE DATOS:
python manage.py migrate

ABRIR SERVIDOR:
python manage.py runserver

CREAR APLICACIÓN:
python manage.py startapp blog 

AÑADIR BLOG en mysite settings: 'blog',

MODELO DEL POST:
Abrir blog/models.py
Escribir:
from django.db import models
from django.utils import timezone


class Post(models.Model):
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(
            default=timezone.now)
    published_date = models.DateTimeField(
            blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title

GUARDAR CAMBIOS EN MODELO:
Escribir en consola: python manage.py makemigrations blog
Escibir: python manage.py migrate blog

INCLUIR MODELO:
Reemplazar en blog/admin.py con: 
from django.contrib import admin
from .models import Post

admin.site.register(Post)

CREAR SUPERUSUARIO:
Escribir en consola: python manage.py createsuperuser

TENER INSTALADO: GitHub
CREAR REPOSITORIO DE CÓDIGO (Escribir en consola):
git init
git config --global user."Tu nombre"
git config --global user.user.email tu@ejemplo.com

CREAR NUEVO ARCHIVO:
.gitignore
Escribir en el:
*.pyc
*~
__pycache__
myvenv
db.sqlite3
/static
.DS_Store

PARA MOSTRAR INFO SOBRE ARCHIBO ESCRIBIR en consola: git status
LUEGO: git add --all .
LUEGO: git commit -m "Mi aplicación Django Girls, primer commit"

REGISTRARSE en: GitHub.com 
NOMBRE REPOSITORIO: my-first-blog

ESCRIBIR CONSOLA: 
- git remote add origin https://github.com/liliumh/my-first-blog.git
- git push -u origin master

CREAR CUENTA EN https://www.pythonanywhere.com/
Create new API token
iniciar una consola "Bash"
Instalar: pip3.6 install --user pythonanywhere
Escribir: pa_autoconfigure_django.py https://github.com/Liliumh/my-first-blog.git
Escribir: python manage.py createsuperuser
AÑADIR A ALLOWED_HOSTS  en pythonanywhere mysite/settings.py 'liliumh.pythonanywhere.com'

ESCRIBIR EN mysite/urls.py: (include, blog.urls)
from django.urls import path, include
from django.contrib import admin

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
]

AÑADIR NUEVO ARCHIVO urls.py en el directorio blog
AÑADIR: 
from django.urls import path
from . import views

urlpatterns = [
    path('', views.post_list, name='post_list'),
]

ESCRIBIR EN blog/views.py :
def post_list(request):
    return render(request, 'blog/post_list.html', {})

AÑADIR CARPETA templates dentro de carpeta blog, 
y dentro de templates otra llamada blog
Dentro añadir archivo: post_list.html
Dentro de este escribir:
<html>
    <head>
        <title>Django Girls blog</title>
    </head>
    <body>
        <div>
            <h1><a href="/">Django Girls Blog</a></h1>
        </div>

        <div>
            <p>published: 14.06.2014, 12:14</p>
            <h2><a href="">My first post</a></h2>
            <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p>
        </div>

        <div>
            <p>published: 14.06.2014, 12:14</p>
            <h2><a href="">My second post</a></h2>
            <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut f.</p>
        </div>
    </body>
</html>

VER SITIO WEB: http://127.0.0.1:8000/

ESCRIBIR EN CONSOLA:
- git status
- git add --all .
- git status
- git commit -m "Cambie el HTML para la página."
- git push

ESCRIBIR EN CONSOLA BASH:
- cd ~/liliumh.pythonanywhere.com
- git pull
#Si da error: git fetch --all y luego git reset --hard origin/master

RELOAD LA WEB

ESCRIBIR EN CONSOLA:
- python manage.py shell
- Post.objects.all()
- from blog.models import Post
- Post.objects.all()
- from django.contrib.auth.models import User
- User.objects.all()
- me = User.objects.get(username='lilium')
- Post.objects.create(author=me, title='Sample title', text='Test')
<Post: Sample title> #Añade entradas
- Post.objects.all() #Para ver si funcionó.
- Post.objects.filter(author=me) #Para encontrar todos los post
- Post.objects.filter(title__contains='title') #Para encontrar entradas con la palabra title en campo title
>>> from django.utils import timezone #Lista con todos los post por fecha
>>> Post.objects.filter(published_date__lte=timezone.now())

>>> post = Post.objects.get(title="Sample title") #Para añadir el post que se hizo desde consola
>>> post.publish() #Se publica
#Si dice que hay mas de 1 borrarlos todos con Post.objects.all().remove() y vuelves a crear el post

>>> Post.objects.order_by('created_date') #Para ordenarlos por campo
>>> Post.objects.order_by('-created_date') #Para invertir el orden agregando - al principio
>>> Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date') #Para encadenarlos















