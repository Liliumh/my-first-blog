if si
elif sino si...
else sino|si todo lo anterior falla

== igual
!= no igual

> mas grande que
< menor que
>= mas grande o igual que
<= menor o igual que

Condiciones encandenadas:

nombre=='lydia' and estado=='useless' si y si
nombre=='lydia' or estado=='useless' si o si

def definir

for i in range (valor Inicial, mientras Sea Menor)

DJANGO:

CREAR PROYECTO:
django-admin.exe startproject mysite .

MIGRAR BASE DATOS:
python manage.py migrate

ABRIR SERVIDOR:
python manage.py runserver

CREAR APLICACIÓN:
python manage.py startapp blog 

AÑADIR BLOG en mysite settings: 'blog',

MODELO DEL POST:
Abrir blog/models.py
Escribir:
from django.db import models
from django.utils import timezone


class Post(models.Model):
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(
            default=timezone.now)
    published_date = models.DateTimeField(
            blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title

GUARDAR CAMBIOS EN MODELO:
Escribir en consola: python manage.py makemigrations blog
Escibir: python manage.py migrate blog

INCLUIR MODELO:
Reemplazar en blog/admin.py con: 
from django.contrib import admin
from .models import Post

admin.site.register(Post)

CREAR SUPERUSUARIO:
Escribir en consola: python manage.py createsuperuser

TENER INSTALADO: GitHub
CREAR REPOSITORIO DE CÓDIGO (Escribir en consola):
git init
git config --global user."Tu nombre"
git config --global user.user.email tu@ejemplo.com

CREAR NUEVO ARCHIVO:
.gitignore
Escribir en el:
*.pyc
*~
__pycache__
myvenv
db.sqlite3
/static
.DS_Store

PARA MOSTRAR INFO SOBRE ARCHIBO ESCRIBIR en consola: git status
LUEGO: git add --all .
LUEGO: git commit -m "Mi aplicación Django Girls, primer commit"

REGISTRARSE en: GitHub.com 
NOMBRE REPOSITORIO: my-first-blog

ESCRIBIR CONSOLA: 
- git remote add origin https://github.com/liliumh/my-first-blog.git
- git push -u origin master

CREAR CUENTA EN https://www.pythonanywhere.com/
Create new API token
iniciar una consola "Bash"
Instalar: pip3.6 install --user pythonanywhere
Escribir: pa_autoconfigure_django.py https://github.com/Liliumh/my-first-blog.git
Escribir: python manage.py createsuperuser
AÑADIR A ALLOWED_HOSTS  en pythonanywhere mysite/settings.py 'liliumh.pythonanywhere.com'

ESCRIBIR EN mysite/urls.py: (include, blog.urls)
from django.urls import path, include
from django.contrib import admin

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
]

AÑADIR NUEVO ARCHIVO urls.py en el directorio blog
AÑADIR: 
from django.urls import path
from . import views

urlpatterns = [
    path('', views.post_list, name='post_list'),
]

ESCRIBIR EN blog/views.py :
def post_list(request):
    return render(request, 'blog/post_list.html', {})

AÑADIR CARPETA templates dentro de carpeta blog, 
y dentro de templates otra llamada blog
Dentro añadir archivo: post_list.html
Dentro de este escribir:
<html>
    <head>
        <title>Django Girls blog</title>
    </head>
    <body>
        <div>
            <h1><a href="/">Django Girls Blog</a></h1>
        </div>

        <div>
            <p>published: 14.06.2014, 12:14</p>
            <h2><a href="">My first post</a></h2>
            <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p>
        </div>

        <div>
            <p>published: 14.06.2014, 12:14</p>
            <h2><a href="">My second post</a></h2>
            <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut f.</p>
        </div>
    </body>
</html>

VER SITIO WEB: http://127.0.0.1:8000/

ESCRIBIR EN CONSOLA:
- git status
- git add --all .
- git status
- git commit -m "Cambie el HTML para la página."
- git push

ESCRIBIR EN CONSOLA BASH:
- cd ~/liliumh.pythonanywhere.com
- git pull
#Si da error: git fetch --all y luego git reset --hard origin/master

RELOAD LA WEB

ESCRIBIR EN CONSOLA:
- python manage.py shell
- Post.objects.all()
- from blog.models import Post
- Post.objects.all()
- from django.contrib.auth.models import User
- User.objects.all()
- me = User.objects.get(username='lilium')
- Post.objects.create(author=me, title='Sample title', text='Test')
<Post: Sample title> #Añade entradas
- Post.objects.all() #Para ver si funcionó.
- Post.objects.filter(author=me) #Para encontrar todos los post
- Post.objects.filter(title__contains='title') #Para encontrar entradas con la palabra title en campo title
>>> from django.utils import timezone #Lista con todos los post por fecha
>>> Post.objects.filter(published_date__lte=timezone.now())

>>> post = Post.objects.get(title="Sample title") #Para añadir el post que se hizo desde consola
>>> post.publish() #Se publica
#Si dice que hay mas de 1 borrarlos todos con Post.objects.all().remove() y vuelves a crear el post

>>> Post.objects.order_by('created_date') #Para ordenarlos por campo
>>> Post.objects.order_by('-created_date') #Para invertir el orden agregando - al principio
>>> Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date') #Para encadenarlos

#PARA CAMBIAR VALORES DE LOS MODELOS (nombres post) primero lo seleccionas con filter, si solo tienes 1 pones .update(campo='nuevo valor')
fila=Post.objects.filter(id=10)
fila.update(title='useless')

AÑADIR EN views.py:
from django.shortcuts import render
from django.utils import timezone
from .models import Post

def post_list(request):
    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
    return render(request, 'blog/post_list.html', {'posts': posts})

AÑADIR/MODIFICAR EN templates post_list: 
{% for post in posts %}
{{post.published_date}}
{{post.title}}
{{ post.text|linebreaksbr }}
{% endfor %}

SUBIR CÓDIGO A GITHUB:
git status
git add --all .
git status
git commit -m #"Templates modificados para mostrar post desde base de datos."
git push

cd 
git pull

RELOAD WEB

CSS:
AÑADIR EN HEAD HTML:
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">

CREAR CARPETA static DENTRO DE la app blog, CREAR CARPETA css DENTRO DE static, 
CREAR NUEVO ARCHIVO DENTRO DE CARPETA css LLAMADO: blog.css

AÑADIR EN blog.css:
h1 a {
    color: #FCA205;
}

AÑADIR EN blog/templates/blog/post_list.html AL PRINCIPIO:
{% load static %} #Para decirle a nuestra plantilla HTML que hemos añadido código CSS

AÑADIR ENTRE <head> y <head>, DESPUÉS DE LOS ENLACES A ARCHIVOS CSS DE BOOTSTRAP:
<link rel="stylesheet" href="{% static 'css/blog.css' %}"> #Le decimos a nuestra plantilla dónde se encuentra nuestro archivo css

AÑADIR EN blog/static/css/blog.css : #Aumenta el margen en el lado izquierdo

body {
    padding-left: 15px;
}

AÑADIR EN <head> del archivo blog/templates/blog/post_list.html: #Personaliza la tipografía del título
<link href="//fonts.googleapis.com/css?family=Lobster&subset=latin,latin-ext" rel="stylesheet" type="text/css">

AÑADIR EN post_list.html:
class="page-header"> #Al div del encabezado
class="post"> #Al div de la publicación del blog

AÑADIR EN blog.css: #Bloques de declaración a selectores
.page-header {
    background-color: #ff9400;
    margin-top: 0;
    padding: 20px 20px 20px 40px;
}

.page-header h1, .page-header h1 a, .page-header h1 a:visited, .page-header h1 a:active {
    color: #ffffff;
    font-size: 36pt;
    text-decoration: none;
}

.content {
    margin-left: 40px;
}

h1, h2, h3, h4 {
    font-family: 'Lobster', cursive;
}

.date {
    float: right;
    color: #828282;
}

.save {
    float: right;
}

.post-form textarea, .post-form input {
    width: 100%;
}

.top-menu, .top-menu:hover, .top-menu:visited {
    color: #ffffff;
    float: right;
    font-size: 26pt;
    margin-right: 20px;
}

.post {
    margin-bottom: 70px;
}

.post h1 a, .post h1 a:visited {
    color: #000000;
}

CAMBIAR EN post_list.html: #Rodea el código HTML que muestra los posts con declaraciones de clases (desde {% for post in posts %} hasta {% endfor %})
<div class="content container">
    <div class="row">
        <div class="col-md-8">
            {% for post in posts %}
                <div class="post">
                    <div class="date">
                        <p>published: {{ post.published_date }}</p>
                    </div>
                    <h1><a href="">{{ post.title }}</a></h1>
                    <p>{{ post.text|linebreaksbr }}</p>
                </div>
            {% endfor %}
        </div>
    </div>
</div>

CREAR un archivo base.html en blog/templates/blog/
Copiar todo el contenido de post_list.html en base.html
REEMPLAZAR en base.html el <body> (todo lo que haya entre <body> and </body>) con:
<body>
    <div class="page-header">
        <h1><a href="/">Django Girls Blog</a></h1>
    </div>
    <div class="content container">
        <div class="row">
            <div class="col-md-8">
            {% block content %}
            {% endblock %}
            </div>
        </div>
    </div>
</body>

EN blog/templates/blog/post_list.html QUITAR TODO LO QUE HAY POR ENCIMA DE:
{% for post in posts %} y por debajo de {% endfor %}  :
{% for post in posts %}
    <div class="post">
        <div class="date">
            {{ post.published_date }}
        </div>
        <h1><a href="">{{ post.title }}</a></h1>
        <p>{{ post.text|linebreaksbr }}</p>
    </div>
{% endfor %}

PONER todo entre {% block content %} y {% endblock %}
{% block content %}
    {% for post in posts %}
        <div class="post">
            <div class="date">
                {{ post.published_date }}
            </div>
            <h1><a href="">{{ post.title }}</a></h1>
            <p>{{ post.text|linebreaksbr }}</p>
        </div>
    {% endfor %}
{% endblock %}

AÑADIR etiqueta "extends" al comienzo del archivo (ARRIBA DEL TODO):
{% extends 'blog/base.html' %}

SI DA ERROR REINICIAR: 
Ctrl+C
python manage.py runserver.

CAMBIAR EN post_list.html:
<h1><a href="{% url 'post_detail' pk=post.pk %}">{{ post.title }}</a></h1>

AÑADIR en urls.py:
path('post/<int:pk>/', views.post_detail, name='post_detail'),
]

AÑADIR EN views.py:
Post.objects.get(pk=pk) #?¿

from django.shortcuts import render, get_object_or_404

Y al final del archivo:
def post_detail(request, pk):
    post = get_object_or_404(Post, pk=pk)
    return render(request, 'blog/post_detail.html',
{'post': post})

AÑADIR fichero en blog/templates/blog llamado:
post_detail.html
Y escribir:
{% extends 'blog/base.html' %}

{% block content %}
    <div class="post">
        {% if post.published_date %}
            <div class="date">
                {{ post.published_date }}
            </div>
        {% endif %}
        <h1>{{ post.title }}</h1>
        <p>{{ post.text|linebreaksbr }}</p>
    </div>
{% endblock %}

DESPLEGAR:
- git status
- git add -A .
- git status
- git commit -m "Agregadas vistas y plantilla para el detalle del post del blog así como también CSS para el sitio."
- git push

EN CONSOLA BASH:
cd ~/liliumh.pythonanywhere.com
git pull

ACTUALIZAR los ficheros estáticos (BASH):
workon liliumh.pythonanywhere.com
python manage.py collectstatic

CREAR ARCHIVO EN blog:
forms.py

ESCRIBIR:
from django import forms

from .models import Post

class PostForm(forms.ModelForm):

    class Meta:
        model = Post
        fields = ('title', 'text',)

AÑADIR en el div A blog/templates/blog/post_base.html: (bajo <div class="page-header">)
<a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>

error NoReverseMatch

AÑADIR EN blog/urls.py:
path('post/new', views.post_new, name='post_new'),

AttributeError #Por no tener la vista post_new

AÑADIR EN blog/views.py:
from .forms import PostForm
Y:
def post_new(request):
    form = PostForm()
    return render(request, 'blog/post_edit.html', {'form': form})

CREAR  fichero post_edit.html el el directorio blog/templates/blog
ESCRIBIR EN blog/templates/blog/post_edit.html:

{% extends 'blog/base.html' %}

{% block content %}
    <h1>New post</h1>
    <form method="POST" class="post-form">{% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="save btn btn-default">Save</button>
    </form>
{% endblock %}

AÑADIR EN blog/views.py:
if request.method == "POST":
    form = PostForm(request.POST)
else:
    form = PostForm()

if form.is_valid():
    post = form.save(commit=False)
    post.author = request.user
    post.published_date = timezone.now()
    post.save()

- from django.shortcuts import redirect

return redirect('post_detail', pk=post.pk)

SE VERÍA ASÍ:
def post_new(request):
    if request.method == "POST":
        form = PostForm(request.POST)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.published_date = timezone.now()
            post.save()
            return redirect('blog.views.post_detail', pk=post.pk)
    else:
        form = PostForm()
    return render(request, 'blog/post_edit.html', {'form': form})

AGREGAR LINEA EN blog/templates/blog/post_detail.html:
<a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
QUEDA ASÍ:
{% extends 'blog/base.html' %}

{% block content %}
    <div class="post">
        {% if post.published_date %}
            <div class="date">
                {{ post.published_date }}
            </div>
        {% endif %}
        <a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
        <h1>{{ post.title }}</h1>
        <p>{{ post.text|linebreaksbr }}</p>
    </div>
{% endblock %}

AÑADIR EN blog/urls.py:
path('post/<int:pk>/edit/', views.post_edit, name='post_edit')

AÑADIR EN blog/views.py:(FINAL DEL TODO)
def post_edit(request, pk):
    post = get_object_or_404(Post, pk=pk)
    if request.method == "POST":
        form = PostForm(request.POST, instance=post)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.published_date = timezone.now()
            post.save()
            return redirect('post_detail', pk=post.pk)
    else:
        form = PostForm(instance=post)
    return render(request, 'blog/post_edit.html', {'form': form})

SEGURIDAD
AÑADIR EN blog/templates/blog/base.html:
{% if user.is_authenticated %} #
    <a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>
{% endif %} #

AÑADIR EN post_detail.html:
{% if user.is_authenticated %} #
    <a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
{% endif %} #

DESPLIEGUE (SUBIR A GITHUB)
$ git status
$ git add --all .
$ git status
$ git commit -m "Added views to create/edit blog post inside the site."
$ git push

EN CONSOLA BASH:
cd ~/liliumh.pythonanywhere.com
git pull






